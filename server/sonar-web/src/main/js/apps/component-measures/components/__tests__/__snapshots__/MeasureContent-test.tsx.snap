// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should render correctly for a file 1`] = `
<div
  className="layout-page-main no-outline"
>
  <A11ySkipTarget
    anchor="measures_main"
  />
  <div
    className="layout-page-header-panel layout-page-main-header"
  >
    <div
      className="layout-page-header-panel-inner layout-page-main-header-inner"
    >
      <div
        className="layout-page-main-inner"
      >
        <MeasureContentHeader
          left={
            <Breadcrumbs
              backToFirst={true}
              className="text-ellipsis flex-1"
              component={
                {
                  "key": "foo:src/index.tsx",
                  "measures": [
                    {
                      "bestValue": false,
                      "metric": "bugs",
                      "value": "1",
                    },
                  ],
                  "name": "index.tsx",
                  "path": "src/index.tsx",
                  "qualifier": "FIL",
                }
              }
              handleSelect={[Function]}
              rootComponent={
                {
                  "key": "foo",
                  "measures": [
                    {
                      "bestValue": false,
                      "metric": "bugs",
                      "value": "12",
                    },
                  ],
                  "name": "Foo",
                  "qualifier": "TRK",
                }
              }
            />
          }
          right={
            <div
              className="display-flex-center"
            />
          }
        />
      </div>
    </div>
  </div>
  <div
    className="layout-page-main-inner measure-details-content"
  >
    <MeasureHeader
      component={
        {
          "key": "foo:src/index.tsx",
          "measures": [
            {
              "bestValue": false,
              "metric": "bugs",
              "value": "1",
            },
          ],
          "name": "index.tsx",
          "path": "src/index.tsx",
          "qualifier": "FIL",
        }
      }
      measureValue="12"
      metric={
        {
          "direction": 1,
          "domain": "Reliability",
          "id": "1",
          "key": "bugs",
          "name": "Bugs",
          "type": "INT",
        }
      }
    />
    <div
      className="measure-details-viewer"
    >
      <SourceViewer
        component="foo:src/index.tsx"
        displayAllIssues={false}
        displayIssueLocationsCount={true}
        displayIssueLocationsLink={true}
        displayLocationMarkers={true}
        metricKey="bugs"
      />
    </div>
  </div>
</div>
`;

exports[`should render correctly for a project 1`] = `
<div
  className="layout-page-main no-outline"
>
  <A11ySkipTarget
    anchor="measures_main"
  />
  <div
    className="layout-page-header-panel layout-page-main-header"
  >
    <div
      className="layout-page-header-panel-inner layout-page-main-header-inner"
    >
      <div
        className="layout-page-main-inner"
      >
        <MeasureContentHeader
          left={
            <Breadcrumbs
              backToFirst={true}
              className="text-ellipsis flex-1"
              component={
                {
                  "key": "foo",
                  "measures": [
                    {
                      "bestValue": false,
                      "metric": "bugs",
                      "value": "12",
                    },
                  ],
                  "name": "Foo",
                  "qualifier": "TRK",
                }
              }
              handleSelect={[Function]}
              rootComponent={
                {
                  "key": "foo",
                  "measures": [
                    {
                      "bestValue": false,
                      "metric": "bugs",
                      "value": "12",
                    },
                  ],
                  "name": "Foo",
                  "qualifier": "TRK",
                }
              }
            />
          }
          right={
            <div
              className="display-flex-center"
            >
              <React.Fragment>
                <div
                  id="measures-view-selection-label"
                >
                  component_measures.view_as
                </div>
                <MeasureViewSelect
                  className="measure-view-select spacer-left big-spacer-right"
                  handleViewChange={[Function]}
                  metric={
                    {
                      "bestValue": "0",
                      "custom": false,
                      "description": "Bugs",
                      "direction": 1,
                      "domain": "Reliability",
                      "hidden": false,
                      "higherValuesAreBetter": false,
                      "key": "bugs",
                      "name": "Bugs",
                      "qualitative": true,
                      "type": "INT",
                    }
                  }
                  view="list"
                />
                <PageActions
                  componentQualifier="TRK"
                  showShortcuts={true}
                  total={2}
                />
              </React.Fragment>
            </div>
          }
        />
      </div>
    </div>
  </div>
  <div
    className="layout-page-main-inner measure-details-content"
  >
    <MeasureHeader
      component={
        {
          "key": "foo",
          "measures": [
            {
              "bestValue": false,
              "metric": "bugs",
              "value": "12",
            },
          ],
          "name": "Foo",
          "qualifier": "TRK",
        }
      }
      measureValue="12"
      metric={
        {
          "bestValue": "0",
          "custom": false,
          "description": "Bugs",
          "direction": 1,
          "domain": "Reliability",
          "hidden": false,
          "higherValuesAreBetter": false,
          "key": "bugs",
          "name": "Bugs",
          "qualitative": true,
          "type": "INT",
        }
      }
    />
    <FilesView
      components={
        [
          {
            "key": "foo:src/index.tsx",
            "leak": undefined,
            "measures": [
              {
                "bestValue": false,
                "leak": undefined,
                "metric": {
                  "domain": "Reliability",
                  "id": "1",
                  "key": "bugs",
                  "name": "Bugs",
                  "type": "INT",
                },
                "value": "1",
              },
            ],
            "name": "index.tsx",
            "path": "src/index.tsx",
            "qualifier": "FIL",
            "value": "1",
          },
        ]
      }
      defaultShowBestMeasures={false}
      fetchMore={[Function]}
      handleOpen={[Function]}
      handleSelect={[Function]}
      loadingMore={false}
      metric={
        {
          "bestValue": "0",
          "custom": false,
          "description": "Bugs",
          "direction": 1,
          "domain": "Reliability",
          "hidden": false,
          "higherValuesAreBetter": false,
          "key": "bugs",
          "name": "Bugs",
          "qualitative": true,
          "type": "INT",
        }
      }
      metrics={
        {
          "bugs": {
            "domain": "Reliability",
            "id": "1",
            "key": "bugs",
            "name": "Bugs",
            "type": "INT",
          },
        }
      }
      paging={
        {
          "pageIndex": 1,
          "pageSize": 500,
          "total": 2,
        }
      }
      rootComponent={
        {
          "key": "foo",
          "measures": [
            {
              "bestValue": false,
              "metric": "bugs",
              "value": "12",
            },
          ],
          "name": "Foo",
          "qualifier": "TRK",
        }
      }
      view="list"
    />
  </div>
</div>
`;

exports[`should render correctly when asc prop is defined 1`] = `
<div
  className="layout-page-main no-outline"
>
  <A11ySkipTarget
    anchor="measures_main"
  />
  <div
    className="layout-page-header-panel layout-page-main-header"
  >
    <div
      className="layout-page-header-panel-inner layout-page-main-header-inner"
    >
      <div
        className="layout-page-main-inner"
      >
        <MeasureContentHeader
          left={
            <Breadcrumbs
              backToFirst={true}
              className="text-ellipsis flex-1"
              component={
                {
                  "key": "foo",
                  "measures": [
                    {
                      "bestValue": false,
                      "metric": "bugs",
                      "value": "12",
                    },
                  ],
                  "name": "Foo",
                  "qualifier": "TRK",
                }
              }
              handleSelect={[Function]}
              rootComponent={
                {
                  "key": "foo",
                  "measures": [
                    {
                      "bestValue": false,
                      "metric": "bugs",
                      "value": "12",
                    },
                  ],
                  "name": "Foo",
                  "qualifier": "TRK",
                }
              }
            />
          }
          right={
            <div
              className="display-flex-center"
            >
              <React.Fragment>
                <div
                  id="measures-view-selection-label"
                >
                  component_measures.view_as
                </div>
                <MeasureViewSelect
                  className="measure-view-select spacer-left big-spacer-right"
                  handleViewChange={[Function]}
                  metric={
                    {
                      "bestValue": "0",
                      "custom": false,
                      "description": "Bugs",
                      "direction": 1,
                      "domain": "Reliability",
                      "hidden": false,
                      "higherValuesAreBetter": false,
                      "key": "bugs",
                      "name": "Bugs",
                      "qualitative": true,
                      "type": "INT",
                    }
                  }
                  view="list"
                />
                <PageActions
                  componentQualifier="TRK"
                  showShortcuts={true}
                  total={2}
                />
              </React.Fragment>
            </div>
          }
        />
      </div>
    </div>
  </div>
  <div
    className="layout-page-main-inner measure-details-content"
  >
    <MeasureHeader
      component={
        {
          "key": "foo",
          "measures": [
            {
              "bestValue": false,
              "metric": "bugs",
              "value": "12",
            },
          ],
          "name": "Foo",
          "qualifier": "TRK",
        }
      }
      measureValue="12"
      metric={
        {
          "bestValue": "0",
          "custom": false,
          "description": "Bugs",
          "direction": 1,
          "domain": "Reliability",
          "hidden": false,
          "higherValuesAreBetter": false,
          "key": "bugs",
          "name": "Bugs",
          "qualitative": true,
          "type": "INT",
        }
      }
    />
    <FilesView
      components={
        [
          {
            "key": "foo:src/index.tsx",
            "leak": undefined,
            "measures": [
              {
                "bestValue": false,
                "leak": undefined,
                "metric": {
                  "domain": "Reliability",
                  "id": "1",
                  "key": "bugs",
                  "name": "Bugs",
                  "type": "INT",
                },
                "value": "1",
              },
            ],
            "name": "index.tsx",
            "path": "src/index.tsx",
            "qualifier": "FIL",
            "value": "1",
          },
        ]
      }
      defaultShowBestMeasures={true}
      fetchMore={[Function]}
      handleOpen={[Function]}
      handleSelect={[Function]}
      loadingMore={false}
      metric={
        {
          "bestValue": "0",
          "custom": false,
          "description": "Bugs",
          "direction": 1,
          "domain": "Reliability",
          "hidden": false,
          "higherValuesAreBetter": false,
          "key": "bugs",
          "name": "Bugs",
          "qualitative": true,
          "type": "INT",
        }
      }
      metrics={
        {
          "bugs": {
            "domain": "Reliability",
            "id": "1",
            "key": "bugs",
            "name": "Bugs",
            "type": "INT",
          },
        }
      }
      paging={
        {
          "pageIndex": 1,
          "pageSize": 500,
          "total": 2,
        }
      }
      rootComponent={
        {
          "key": "foo",
          "measures": [
            {
              "bestValue": false,
              "metric": "bugs",
              "value": "12",
            },
          ],
          "name": "Foo",
          "qualifier": "TRK",
        }
      }
      view="list"
    />
  </div>
</div>
`;

exports[`should render correctly when view prop is tree 1`] = `
<div
  className="layout-page-main no-outline"
>
  <A11ySkipTarget
    anchor="measures_main"
  />
  <div
    className="layout-page-header-panel layout-page-main-header"
  >
    <div
      className="layout-page-header-panel-inner layout-page-main-header-inner"
    >
      <div
        className="layout-page-main-inner"
      >
        <MeasureContentHeader
          left={
            <Breadcrumbs
              backToFirst={false}
              className="text-ellipsis flex-1"
              component={
                {
                  "key": "foo",
                  "measures": [
                    {
                      "bestValue": false,
                      "metric": "bugs",
                      "value": "12",
                    },
                  ],
                  "name": "Foo",
                  "qualifier": "TRK",
                }
              }
              handleSelect={[Function]}
              rootComponent={
                {
                  "key": "foo",
                  "measures": [
                    {
                      "bestValue": false,
                      "metric": "bugs",
                      "value": "12",
                    },
                  ],
                  "name": "Foo",
                  "qualifier": "TRK",
                }
              }
            />
          }
          right={
            <div
              className="display-flex-center"
            >
              <React.Fragment>
                <div
                  id="measures-view-selection-label"
                >
                  component_measures.view_as
                </div>
                <MeasureViewSelect
                  className="measure-view-select spacer-left big-spacer-right"
                  handleViewChange={[Function]}
                  metric={
                    {
                      "bestValue": "0",
                      "custom": false,
                      "description": "Bugs",
                      "direction": 1,
                      "domain": "Reliability",
                      "hidden": false,
                      "higherValuesAreBetter": false,
                      "key": "bugs",
                      "name": "Bugs",
                      "qualitative": true,
                      "type": "INT",
                    }
                  }
                  view="tree"
                />
                <PageActions
                  componentQualifier="TRK"
                  showShortcuts={true}
                  total={2}
                />
              </React.Fragment>
            </div>
          }
        />
      </div>
    </div>
  </div>
  <div
    className="layout-page-main-inner measure-details-content"
  >
    <MeasureHeader
      component={
        {
          "key": "foo",
          "measures": [
            {
              "bestValue": false,
              "metric": "bugs",
              "value": "12",
            },
          ],
          "name": "Foo",
          "qualifier": "TRK",
        }
      }
      measureValue="12"
      metric={
        {
          "bestValue": "0",
          "custom": false,
          "description": "Bugs",
          "direction": 1,
          "domain": "Reliability",
          "hidden": false,
          "higherValuesAreBetter": false,
          "key": "bugs",
          "name": "Bugs",
          "qualitative": true,
          "type": "INT",
        }
      }
    />
    <FilesView
      components={
        [
          {
            "key": "foo:src/index.tsx",
            "leak": undefined,
            "measures": [
              {
                "bestValue": false,
                "leak": undefined,
                "metric": {
                  "domain": "Reliability",
                  "id": "1",
                  "key": "bugs",
                  "name": "Bugs",
                  "type": "INT",
                },
                "value": "1",
              },
            ],
            "name": "index.tsx",
            "path": "src/index.tsx",
            "qualifier": "FIL",
            "value": "1",
          },
        ]
      }
      defaultShowBestMeasures={true}
      fetchMore={[Function]}
      handleOpen={[Function]}
      handleSelect={[Function]}
      loadingMore={false}
      metric={
        {
          "bestValue": "0",
          "custom": false,
          "description": "Bugs",
          "direction": 1,
          "domain": "Reliability",
          "hidden": false,
          "higherValuesAreBetter": false,
          "key": "bugs",
          "name": "Bugs",
          "qualitative": true,
          "type": "INT",
        }
      }
      metrics={
        {
          "bugs": {
            "domain": "Reliability",
            "id": "1",
            "key": "bugs",
            "name": "Bugs",
            "type": "INT",
          },
        }
      }
      paging={
        {
          "pageIndex": 1,
          "pageSize": 500,
          "total": 2,
        }
      }
      rootComponent={
        {
          "key": "foo",
          "measures": [
            {
              "bestValue": false,
              "metric": "bugs",
              "value": "12",
            },
          ],
          "name": "Foo",
          "qualifier": "TRK",
        }
      }
      view="tree"
    />
  </div>
</div>
`;

exports[`should test fetchMoreComponents to work correctly 1`] = `
<div
  className="layout-page-main no-outline"
>
  <A11ySkipTarget
    anchor="measures_main"
  />
  <div
    className="layout-page-header-panel layout-page-main-header"
  >
    <div
      className="layout-page-header-panel-inner layout-page-main-header-inner"
    >
      <div
        className="layout-page-main-inner"
      >
        <MeasureContentHeader
          left={
            <Breadcrumbs
              backToFirst={true}
              className="text-ellipsis flex-1"
              component={
                {
                  "key": "foo",
                  "measures": [
                    {
                      "bestValue": false,
                      "metric": "bugs",
                      "value": "12",
                    },
                  ],
                  "name": "Foo",
                  "qualifier": "TRK",
                }
              }
              handleSelect={[Function]}
              rootComponent={
                {
                  "key": "foo",
                  "measures": [
                    {
                      "bestValue": false,
                      "metric": "bugs",
                      "value": "12",
                    },
                  ],
                  "name": "Foo",
                  "qualifier": "TRK",
                }
              }
            />
          }
          right={
            <div
              className="display-flex-center"
            >
              <React.Fragment>
                <div
                  id="measures-view-selection-label"
                >
                  component_measures.view_as
                </div>
                <MeasureViewSelect
                  className="measure-view-select spacer-left big-spacer-right"
                  handleViewChange={[Function]}
                  metric={
                    {
                      "direction": 1,
                      "domain": "Reliability",
                      "id": "1",
                      "key": "bugs",
                      "name": "Bugs",
                      "type": "INT",
                    }
                  }
                  view="list"
                />
                <PageActions
                  componentQualifier="TRK"
                  showShortcuts={true}
                  total={0}
                />
              </React.Fragment>
            </div>
          }
        />
      </div>
    </div>
  </div>
  <div
    className="layout-page-main-inner measure-details-content"
  >
    <MeasureHeader
      component={
        {
          "key": "foo",
          "measures": [
            {
              "bestValue": false,
              "metric": "bugs",
              "value": "12",
            },
          ],
          "name": "Foo",
          "qualifier": "TRK",
        }
      }
      measureValue="12"
      metric={
        {
          "direction": 1,
          "domain": "Reliability",
          "id": "1",
          "key": "bugs",
          "name": "Bugs",
          "type": "INT",
        }
      }
    />
    <FilesView
      components={[]}
      defaultShowBestMeasures={false}
      fetchMore={[Function]}
      handleOpen={[Function]}
      handleSelect={[Function]}
      loadingMore={true}
      metric={
        {
          "direction": 1,
          "domain": "Reliability",
          "id": "1",
          "key": "bugs",
          "name": "Bugs",
          "type": "INT",
        }
      }
      metrics={
        {
          "bugs": {
            "direction": 1,
            "domain": "Reliability",
            "id": "1",
            "key": "bugs",
            "name": "Bugs",
            "type": "INT",
          },
        }
      }
      paging={
        {
          "pageIndex": 12,
          "pageSize": 500,
          "total": 0,
        }
      }
      rootComponent={
        {
          "key": "foo",
          "measures": [
            {
              "bestValue": false,
              "metric": "bugs",
              "value": "12",
            },
          ],
          "name": "Foo",
          "qualifier": "TRK",
        }
      }
      view="list"
    />
  </div>
</div>
`;
