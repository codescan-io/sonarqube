// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should render correctly: changed value 1`] = `
<div
  className="settings-definition settings-definition-changed"
  data-key="foo"
>
  <div
    className="settings-definition-left"
  >
    <h3
      className="settings-definition-name"
      title="property.foo.name"
    >
      property.foo.name
    </h3>
    <div
      className="markdown small spacer-top"
      dangerouslySetInnerHTML={
        {
          "__html": "property.foo.description",
        }
      }
    />
    <Tooltip
      overlay="settings.key_x.foo"
    >
      <div
        className="settings-definition-key note little-spacer-top"
      >
        settings.key_x.foo
      </div>
    </Tooltip>
  </div>
  <div
    className="settings-definition-right"
  >
    <div
      className="settings-definition-state"
    />
    <form
      onSubmit={[Function]}
    >
      <Input
        hasValueChanged={true}
        isEditing={false}
        onCancel={[MockFunction]}
        onChange={[MockFunction]}
        onEditing={[MockFunction]}
        onSave={[MockFunction]}
        setting={
          {
            "definition": {
              "category": "foo category",
              "fields": [],
              "key": "foo",
              "options": [],
              "subCategory": "foo subCat",
            },
            "hasValue": false,
            "key": "foo",
          }
        }
        value="new value"
      />
      <DefinitionActions
        changedValue="new value"
        hasError={false}
        hasValueChanged={true}
        isDefault={false}
        isEditing={false}
        onCancel={[MockFunction]}
        onReset={[MockFunction]}
        onSave={[MockFunction]}
        setting={
          {
            "definition": {
              "category": "foo category",
              "fields": [],
              "key": "foo",
              "options": [],
              "subCategory": "foo subCat",
            },
            "hasValue": false,
            "key": "foo",
          }
        }
      />
    </form>
  </div>
</div>
`;

exports[`should render correctly: in error 1`] = `
<div
  className="settings-definition"
  data-key="foo"
>
  <div
    className="settings-definition-left"
  >
    <h3
      className="settings-definition-name"
      title="property.foo.name"
    >
      property.foo.name
    </h3>
    <div
      className="markdown small spacer-top"
      dangerouslySetInnerHTML={
        {
          "__html": "property.foo.description",
        }
      }
    />
    <Tooltip
      overlay="settings.key_x.foo"
    >
      <div
        className="settings-definition-key note little-spacer-top"
      >
        settings.key_x.foo
      </div>
    </Tooltip>
  </div>
  <div
    className="settings-definition-right"
  >
    <div
      className="settings-definition-state"
    >
      <span
        className="text-danger"
      >
        <AlertErrorIcon
          className="spacer-right"
        />
        <span>
          settings.state.validation_failed.validation message
        </span>
      </span>
    </div>
    <form
      onSubmit={[Function]}
    >
      <Input
        hasValueChanged={false}
        isEditing={false}
        onCancel={[MockFunction]}
        onChange={[MockFunction]}
        onEditing={[MockFunction]}
        onSave={[MockFunction]}
        setting={
          {
            "definition": {
              "category": "foo category",
              "fields": [],
              "key": "foo",
              "options": [],
              "subCategory": "foo subCat",
            },
            "hasValue": false,
            "key": "foo",
          }
        }
      />
      <DefinitionActions
        hasError={true}
        hasValueChanged={false}
        isDefault={false}
        isEditing={false}
        onCancel={[MockFunction]}
        onReset={[MockFunction]}
        onSave={[MockFunction]}
        setting={
          {
            "definition": {
              "category": "foo category",
              "fields": [],
              "key": "foo",
              "options": [],
              "subCategory": "foo subCat",
            },
            "hasValue": false,
            "key": "foo",
          }
        }
      />
    </form>
  </div>
</div>
`;

exports[`should render correctly: loading 1`] = `
<div
  className="settings-definition"
  data-key="foo"
>
  <div
    className="settings-definition-left"
  >
    <h3
      className="settings-definition-name"
      title="property.foo.name"
    >
      property.foo.name
    </h3>
    <div
      className="markdown small spacer-top"
      dangerouslySetInnerHTML={
        {
          "__html": "property.foo.description",
        }
      }
    />
    <Tooltip
      overlay="settings.key_x.foo"
    >
      <div
        className="settings-definition-key note little-spacer-top"
      >
        settings.key_x.foo
      </div>
    </Tooltip>
  </div>
  <div
    className="settings-definition-right"
  >
    <div
      className="settings-definition-state"
    >
      <span
        className="text-info"
      >
        <i
          className="spinner spacer-right"
        />
        settings.state.saving
      </span>
    </div>
    <form
      onSubmit={[Function]}
    >
      <Input
        hasValueChanged={false}
        isEditing={false}
        onCancel={[MockFunction]}
        onChange={[MockFunction]}
        onEditing={[MockFunction]}
        onSave={[MockFunction]}
        setting={
          {
            "definition": {
              "category": "foo category",
              "fields": [],
              "key": "foo",
              "options": [],
              "subCategory": "foo subCat",
            },
            "hasValue": false,
            "key": "foo",
          }
        }
      />
      <DefinitionActions
        hasError={false}
        hasValueChanged={false}
        isDefault={false}
        isEditing={false}
        onCancel={[MockFunction]}
        onReset={[MockFunction]}
        onSave={[MockFunction]}
        setting={
          {
            "definition": {
              "category": "foo category",
              "fields": [],
              "key": "foo",
              "options": [],
              "subCategory": "foo subCat",
            },
            "hasValue": false,
            "key": "foo",
          }
        }
      />
    </form>
  </div>
</div>
`;

exports[`should render correctly: original value 1`] = `
<div
  className="settings-definition"
  data-key="foo"
>
  <div
    className="settings-definition-left"
  >
    <h3
      className="settings-definition-name"
      title="property.foo.name"
    >
      property.foo.name
    </h3>
    <div
      className="markdown small spacer-top"
      dangerouslySetInnerHTML={
        {
          "__html": "property.foo.description",
        }
      }
    />
    <Tooltip
      overlay="settings.key_x.foo"
    >
      <div
        className="settings-definition-key note little-spacer-top"
      >
        settings.key_x.foo
      </div>
    </Tooltip>
  </div>
  <div
    className="settings-definition-right"
  >
    <div
      className="settings-definition-state"
    />
    <form
      onSubmit={[Function]}
    >
      <Input
        hasValueChanged={false}
        isEditing={false}
        onCancel={[MockFunction]}
        onChange={[MockFunction]}
        onEditing={[MockFunction]}
        onSave={[MockFunction]}
        setting={
          {
            "definition": {
              "category": "foo category",
              "fields": [],
              "key": "foo",
              "options": [],
              "subCategory": "foo subCat",
            },
            "hasValue": true,
            "key": "foo",
            "value": "original value",
          }
        }
        value="original value"
      />
      <DefinitionActions
        hasError={false}
        hasValueChanged={false}
        isDefault={false}
        isEditing={false}
        onCancel={[MockFunction]}
        onReset={[MockFunction]}
        onSave={[MockFunction]}
        setting={
          {
            "definition": {
              "category": "foo category",
              "fields": [],
              "key": "foo",
              "options": [],
              "subCategory": "foo subCat",
            },
            "hasValue": true,
            "key": "foo",
            "value": "original value",
          }
        }
      />
    </form>
  </div>
</div>
`;

exports[`should render correctly: success 1`] = `
<div
  className="settings-definition"
  data-key="foo"
>
  <div
    className="settings-definition-left"
  >
    <h3
      className="settings-definition-name"
      title="property.foo.name"
    >
      property.foo.name
    </h3>
    <div
      className="markdown small spacer-top"
      dangerouslySetInnerHTML={
        {
          "__html": "property.foo.description",
        }
      }
    />
    <Tooltip
      overlay="settings.key_x.foo"
    >
      <div
        className="settings-definition-key note little-spacer-top"
      >
        settings.key_x.foo
      </div>
    </Tooltip>
  </div>
  <div
    className="settings-definition-right"
  >
    <div
      className="settings-definition-state"
    >
      <span
        className="text-success"
      >
        <AlertSuccessIcon
          className="spacer-right"
        />
        settings.state.saved
      </span>
    </div>
    <form
      onSubmit={[Function]}
    >
      <Input
        hasValueChanged={false}
        isEditing={false}
        onCancel={[MockFunction]}
        onChange={[MockFunction]}
        onEditing={[MockFunction]}
        onSave={[MockFunction]}
        setting={
          {
            "definition": {
              "category": "foo category",
              "fields": [],
              "key": "foo",
              "options": [],
              "subCategory": "foo subCat",
            },
            "hasValue": false,
            "key": "foo",
          }
        }
      />
      <DefinitionActions
        hasError={false}
        hasValueChanged={false}
        isDefault={false}
        isEditing={false}
        onCancel={[MockFunction]}
        onReset={[MockFunction]}
        onSave={[MockFunction]}
        setting={
          {
            "definition": {
              "category": "foo category",
              "fields": [],
              "key": "foo",
              "options": [],
              "subCategory": "foo subCat",
            },
            "hasValue": false,
            "key": "foo",
          }
        }
      />
    </form>
  </div>
</div>
`;

exports[`should render correctly: with description 1`] = `
<div
  className="settings-definition"
  data-key="foo"
>
  <div
    className="settings-definition-left"
  >
    <h3
      className="settings-definition-name"
      title="property.foo.name"
    >
      property.foo.name
    </h3>
    <div
      className="markdown small spacer-top"
      dangerouslySetInnerHTML={
        {
          "__html": "property.foo.description",
        }
      }
    />
    <Tooltip
      overlay="settings.key_x.foo"
    >
      <div
        className="settings-definition-key note little-spacer-top"
      >
        settings.key_x.foo
      </div>
    </Tooltip>
  </div>
  <div
    className="settings-definition-right"
  >
    <div
      className="settings-definition-state"
    />
    <form
      onSubmit={[Function]}
    >
      <Input
        hasValueChanged={false}
        isEditing={false}
        onCancel={[MockFunction]}
        onChange={[MockFunction]}
        onEditing={[MockFunction]}
        onSave={[MockFunction]}
        setting={
          {
            "definition": {
              "category": "foo category",
              "description": "description",
              "fields": [],
              "key": "foo",
              "options": [],
              "subCategory": "foo subCat",
            },
            "hasValue": false,
            "key": "foo",
          }
        }
      />
      <DefinitionActions
        hasError={false}
        hasValueChanged={false}
        isDefault={false}
        isEditing={false}
        onCancel={[MockFunction]}
        onReset={[MockFunction]}
        onSave={[MockFunction]}
        setting={
          {
            "definition": {
              "category": "foo category",
              "description": "description",
              "fields": [],
              "key": "foo",
              "options": [],
              "subCategory": "foo subCat",
            },
            "hasValue": false,
            "key": "foo",
          }
        }
      />
    </form>
  </div>
</div>
`;
